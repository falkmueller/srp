<?php

error_reporting(E_ALL);
ini_set("display_errors", 1);

require './php/lib/srp.php';

$srp = new srp();
$server_url = (@$_SERVER["HTTPS"] == "on" ? "https://" : "http://").$_SERVER["SERVER_NAME"]. (dirname($_SERVER['SCRIPT_NAME']) != '/' ? dirname($_SERVER["SCRIPT_NAME"]): '').'/server.php';
$cookies = array();

?><!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>SRP PHP Client</title>

    <!-- Bootstrap -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">

    <style type="text/css">
        .com_row .col-sm-6 {
            overflow: auto;
            min-height: 200px;
            background-color: #EEE;
            margin-top: 10px;
        }
    </style>
    
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
  </head>
  <body>
    
      <div class="jumbotron">
          <div class="container">
                <h1>SRP PHP Client</h1>
                <p>PHP Client for Login over Secure Remote Password Protocol</p>
          </div>
        
        </div>
      
    <div class="container">
        
        
        
        <h2>1. registrate</h2>  
        <?php 
            $username = "falk";
            $password = "test123";
            $s = $srp->getRandomSeed();
            $x = $srp->generateX($s, $username, $password);
            $v = $srp->generateV($x);
            
            $send = array("phase" => 0, "I" => $username, "v" => $v, "s" => $s);
            $res = curl::exec(array("url" => $server_url, "method" => 'POST', 'postfields' => $send, "cookies" => $cookies));
            $cookies = $res["cookie"];
        ?>
        
        <p>
            generate s (salt) and v (verifier).
            generated by client, stored by server
        </p>
        
        <code>
            $username = "falk";<br/>
            $password = "test123";<br/>
            $s = $srp->getRandomSeed();<br/>
            $x = $srp->generateX($s, $username, $password);<br/>
            $v = $srp->generateV($x);<br/>
            $send = array("phase" => 0, "I" => $username, "v" => $v, "s" => $s);
        </code>
        
        <div class="row com_row">
            <div class="col-sm-6">
                <h3>Send</h3>
                <?php print_r($send); ?>
            </div>
            <div class="col-sm-6">
                <h3>Recive</h3>
                <?php print_r(json_decode($res["body"], true)); ?>
            </div>
        </div>
        
        <h2>2. Login - Phase 1</h2>
        <?php
            $a = $srp->getRandomSeed();
            $A = $srp->generateA($a);
            $send = array("phase" => 1, "I" => $username, "A" => $A);
            $res = curl::exec(array("url" => $server_url, "method" => 'POST', 'postfields' => $send, "cookies" => $cookies));
         
        ?>
        <p>
            client generate a (private random key), A (public generated key) and send A, I (username) to server.
        </p>
        
        <code>
            $a = $srp->getRandomSeed();<br/>
            $A = $srp->generateA($a);<br/>
            $send = array("phase" => 1, "I" => $username, "A" => $A);
        </code>
        
         <div class="row com_row">
            <div class="col-sm-6">
                <h3>Send</h3>
                <?php print_r($send); ?>
            </div>
            <div class="col-sm-6">
                <h3>Recive</h3>
                <?php print_r(json_decode($res["body"], true)); ?>
            </div>
        </div>
        
        <h2>3. Login - Phase 2</h2>
        <p>
            Client receive s (salt) und B (public key of Server) in Phase 1.
            Client build M1 and send it sto Server.
        </p>
        <?php
            $res1 = json_decode($res["body"], true);
            $B = $res1["B"];
            $s = $res1["s"];
            $x = $srp->generateX($s, $username, $password);
            $S = $srp->generateS_Client($A, $B, $a, $x);
            $M1 = $srp->generateM1($A, $B, $S);
            $send = array("phase" => 2, "M1" => $M1);
            $res = curl::exec(array("url" => $server_url, "method" => 'POST', 'postfields' => $send, "cookies" => $cookies));
           
            
        ?>
        
        <code>
            $B = $res1["B"];<br/>
            $s = $res1["s"];<br/>
            $x = $srp->generateX($s, $username, $password);<br/>
            $S = $srp->generateS_Client($A, $B, $a, $x);<br/>
            $M1 = $srp->generateM1($A, $B, $S);<br/>
            $send = array("phase" => 2, "M1" => $M1);
        </code>
        
        <div class="row com_row">
            <div class="col-sm-6">
                <h3>Send</h3>
                <?php print_r($send); ?>
            </div>
            <div class="col-sm-6">
                <h3>Recive</h3>
                <?php print_r(json_decode($res["body"], true)); ?>
            </div>
        </div>
        
        <h2>4. Server verification</h2>
        <p>
            Client receive M2 from Server, rebiuld and compare them and build session key
        </p>
        
        <code>
            $res2 = json_decode($res["body"], true);<br/>
            $M2 = $res2["M2"];<br/>
            $M2_check = $srp->generateM2($A, $M1, $S);<br/>
            <br/>
            if($M2 == $M2_check){<br/>
                echo "SUCCESS;";<br/>
                $K = $srp->generateK($S);<br/>
                echo "SESSION KEY: ".$K;<br/>
            }
        </code>
        
        <h3>Output</h3>
        
        <?php
            $res2 = json_decode($res["body"], true);
            $M2 = $res2["M2"];
            $M2_check = $srp->generateM2($A, $M1, $S);
            
            if($M2 == $M2_check){
                echo "SUCCESS;";
                $K = $srp->generateK($S);
                echo "SESSION KEY: ".$K;
            }
        ?>
        
    </div>
    
     
<?php
////1. generate s, v (clinent generated, stored by server)
//$client_vars["username"] = "falk";
//$client_vars["password"] = "test123";
//
//$s = $srp->getRandomSeed();
//$x = $srp->generateX($s, $client_vars["username"], $client_vars["password"]);
//$client_vars["x"] = $x;
//$server_vars["s"]  = $s;
//$server_vars["v"]  = $srp->generateV($x);
//
////2.1 client generate a, A and send A, I (username) to server
//$client_vars["a"] = $srp->getRandomSeed();
//$client_vars["A"] = $srp->generateA($client_vars["a"]);
//
////2.2 server reveive A, search s, v by I in DB, generate b and B, send s, B to client
//$server_vars["A"] = $client_vars["A"];
//$server_vars["b"] = $srp->getRandomSeed();
//$server_vars["B"] = $srp->generateB($server_vars["b"], $server_vars["v"]);
//
////3.1 client receive s, B; build M1 and send it to server
//$client_vars["B"] = $server_vars["B"];
//$client_vars["S1"] = $srp->generateS_Client($client_vars["A"], $client_vars["B"], $client_vars["a"], $x);
//$client_vars["M1"]  = $srp->generateM1($client_vars["A"], $client_vars["B"], $client_vars["S1"]);
//
//
////3.2 server receive M1, verify it, build k; send M2 back
//$server_vars["M1_recive"] = $client_vars["M1"];
//$server_vars["S2"] = $srp->generateS_Server($server_vars["A"], $server_vars["B"], $server_vars["b"], $server_vars["v"]);
//$M1_check = $srp->generateM1($server_vars["A"], $server_vars["B"], $server_vars["S2"]);
//
//if($server_vars["M1_recive"]== $M1_check){
//    echo "Client verifikation complete".$srp->generateK($server_vars["S2"]);
//}
//
//$server_vars["M2"] = $srp->generateM2($server_vars["A"], $M1_check, $server_vars["S2"]);
//
//
////4. client verify M2, build k
//$M2_check = $srp->generateM2($client_vars["A"], $client_vars["M1"], $client_vars["S1"]);
//
//if($M2_check == $server_vars["M2"]){
//    echo "Server verification complete ".$srp->generateK($client_vars["S1"]);
//}
//
//// ausgabe
//print_r($client_vars);
//print_r($server_vars);

?> 

    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
  
    <a href="https://github.com/falkmueller/srp" target="_blank" class="github-corner" aria-label="View source on Github"><svg width="80" height="80" viewBox="0 0 250 250" style="fill:#70B7FD; color:#fff; position: absolute; top: 0; border: 0; right: 0;" aria-hidden="true"><path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path><path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"></path></svg></a>
  </body>
</html>
<?php

class curl {
    
    public static function exec($params){
    
        $defaults = array("url" => "", "method" => 'GET', 'postfields' => array(), 'cookies' => array());
        $params = array_merge($defaults, $params);

        $ch = curl_init($params["url"]);
        $headers = array();

        if(count($params["cookies"]) > 0){
            $cookie_line = '';
            foreach ($params["cookies"] as $name => $value){
                if ($cookie_line){$cookie_line .= "; ";}
                $cookie_line .= $name.'='.$value;
            }

            $headers[] = 'Cookie: '.$cookie_line;
        }

        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_HEADER, 1);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        if($params["method"] == 'POST'){
            curl_setopt($ch, CURLOPT_POST, 1);
            curl_setopt($ch,CURLOPT_POSTFIELDS, $params["postfields"]);
            if(is_string($params["postfields"])){
                $headers[] = array('Content-Type: text/plain');
            }
        }

        $response = curl_exec($ch);
        $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);
        $header = substr($response, 0, $header_size);
        $body = substr($response, $header_size);
        curl_close($ch);

        //Split into lines
        $headers = explode("\n", $header);
        $cookie_lines = preg_grep('/^Set-Cookie:/', $headers);
        $cookies = array();
        foreach ($cookie_lines as $cookie_line){
            $cookie_line = current(explode(";", substr($cookie_line, strlen("Set-Cookie: "))));
            $cookie_name = substr($cookie_line, 0, strpos($cookie_line, "="));
            $cookies[$cookie_name] = substr($cookie_line, strpos($cookie_line, "=") + 1);
        }

        return array(
            "body" => $body,
            "header" => $headers,
            "cookie" => $cookies
        );
    }
    
}


